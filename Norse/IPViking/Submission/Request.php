<?php
/**
 * An object representation of IPViking Submission Request data.
 *
 * @package Norse
 * @subpackage IPViking
 * @author Jeremy McEntire
 * @version 1.0
 *
 * Copyright (c) 2013, Norse Corp
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the <organization> nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Norse\IPViking;

class Submission_Request extends Request {
    protected $_ip;
    protected $_protocol;
    protected $_cateogry;
    protected $_timestamp;

    public function __construct($config, $ip, $protocol, $category, $timestamp) {
        parent::__construct($config);

        $this->setIP($ip);
        $this->setProtocol($protocol);
        $this->setCategory($category);
        $this->setTimestamp($timestamp);
    }


    /**
     * Basic accessor methods.
     */

    public function setIP($ip) {
        $this->_ip = $ip;
    }

    public function getIP() {
        return $this->_ip;
    }

    public function setProtocol($protocol) {
        if (!is_numeric($protocol)) {
            throw new Exception_InvalidSubmission('Submission_Request::protocol values must be supplied as integers.  See documentation for a list of valid protocol ids.', 182570);
        }

        $this->_protocol = $protocol;
    }

    public function getProtocol() {
        return $this->_protocol;
    }

    public function setCategory($category) {
        if (!is_numeric($category)) {
            throw new Exception_InvalidSubmission('Submission_Request::category values must be supplied as integers.  See documentation for a list of valid category ids.', 182571);
        }

        $this->_category = $category;
    }

    public function getCategory() {
        return $this->_category;
    }

    public function setTimestamp($timestamp) {
        if (!is_numeric($timestamp)) {
            throw new Exception_InvalidSubmission('Submission_Request::timestamp provided is invalid; expecting timestamp, given ' . var_export($timestamp, true), 182572);
        }

        $this->_timestamp = $timestamp;
    }

    public function getTimestamp() {
        return $this->_timestamp;
    }


    /**
     * cURL configuration and interaction.
     */

    /**
     * @return array An array of key->value pairs to be URL encoded for requests
     */
    protected function _getBodyFields() {
        $body_fields = parent::_getBodyFields();

        $body_fields['method']    = 'submission';
        $body_fields['ip']        = $this->getIP();
        $body_fields['protocol']  = $this->getProtocol();
        $body_fields['category']  = $this->getCategory();
        $body_fields['timestamp'] = $this->getTimestamp();

        return $body_fields;
    }

    /**
     * @return array An array of HTTP headers.
     */
    protected function _getHttpHeader() {
        $http_header   = parent::_getHttpHeader();
        // We must unset the expect header automatically generated by cURL for file PUTs
        $http_header[] = 'Expect: ';
        return $http_header;
    }

    /**
     * These methods create a file for use with cURL using an HTTP PUT Method.
     */
    protected function _setCurlFile() {
        $body = $this->_getEncodedBody();
        $this->_filesize = strlen($body);

        $this->_file = fopen('php://memory', 'w+b');
        fwrite($this->_file, $body);
        rewind($this->_file);
    }

    protected function _closeCurlFile() {
        fclose($this->_file);
    }

    /**
     * @return array An array of CURLOPT->value pairs for cURL configuration.
     */
    protected function _getCurlOpts() {
        $curl_opts = parent::_getCurlOpts();

        $curl_opts[CURLOPT_PUT]        = true;
        $curl_opts[CURLOPT_INFILESIZE] = $this->_filesize;
        $curl_opts[CURLOPT_INFILE]     = $this->_file;
        $curl_opts[CURLOPT_HTTPHEADER] = $this->_getHttpHeader();

        return $curl_opts;
    }

    /**
     * A wrapper for curl_exec() which packages the response in a Submission_Response object.
     *
     * @return Submission_Response A response object representing the Submission response.
     */
    public function process() {
        $this->_setCurlFile();
        $this->_setCurlOpts();

        $curl_response = parent::_curlExec();
        $curl_info     = parent::_curlInfo();

        $this->_closeCurlFile();
        return new Submission_Response($curl_response, $curl_info);
    }

    /**
     * A wrapper for curl_exec() which returns the raw cURL response data.
     *
     * @return mixed The result of curl_exec()
     */
    public function exec() {
        $this->_setPutFile();
        $curl_response = parent::_curlExec();
        $this->_closePutFile();
        return $curl_response;
    }

}
